<Application x:Class="GUILayer.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:GUILayer"
             xmlns:vm="clr-namespace:GUILayer.ViewModels"
             xmlns:svm="clr-namespace:GUILayer.ViewModels.SearchViewModels"
             xmlns:ivm="clr-namespace:GUILayer.ViewModels.InsuranceViewModels"
             xmlns:spvm="clr-namespace:GUILayer.ViewModels.StatisticsAndProspectusViewModels"
             xmlns:emvm="clr-namespace:GUILayer.ViewModels.EmployeeManagementViewModels"
             xmlns:bdvm="clr-namespace:GUILayer.ViewModels.BasicDataViewModels"
             xmlns:cvm="clr-namespace:GUILayer.ViewModels.CommissionViewModels"
             xmlns:v="clr-namespace:GUILayer.Views"
             xmlns:sv="clr-namespace:GUILayer.Views.SearchViews"
             xmlns:spv="clr-namespace:GUILayer.Views.StatisticsAndProspectusViews"
             xmlns:emv="clr-namespace:GUILayer.Views.EmployeeManagementViews"
             xmlns:bdv="clr-namespace:GUILayer.Views.BasicDataViews"
             xmlns:cv="clr-namespace:GUILayer.Views.CommissionViews"
             xmlns:iv="clr-namespace:GUILayer.Views.InsuranceViews"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <DataTemplate DataType="{x:Type vm:LogInViewModel}">
            <v:LogInView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:HomeViewModel}">
            <v:HomeView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type svm:SearchValueViewModel}">
            <sv:SearchValueView/> 
        </DataTemplate>
        <DataTemplate DataType="{x:Type svm:SearchEmployeeViewModel}">
            <sv:SearchEmployeeView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type svm:SearchInsuranceTakerPersonViewModel}">
            <sv:SearchInsuranceTakerPersonView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type svm:SearchInsuranceTakerCompanyViewModel}">
            <sv:SearchInsuranceTakerCompanyView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type svm:SearchApplicationChoiceViewModel}">
            <sv:SearchApplicationChoiceView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type svm:SAOverviewViewModel}">
            <sv:SAOverviewView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type svm:LifeOverviewViewModel}">
            <sv:LifeOverviewView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type svm:OPIPApplicationOverviewViewModel}">
            <sv:OPIPApplicationOverviewView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type svm:ApplicationOverviewViewModels}">
            <sv:ApplicationOverviewViews/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ivm:InsuranceViewModel}">
            <iv:InsuranceView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ivm:InsuranceApplicationChoiceViewModel}">
            <iv:InsuranceApplicationChoiceView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type spvm:StatisticsAndProspectusViewModel }">
            <spv:StatisticsAndProspectusView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type emvm:EmployeeManagementViewModel}">
            <emv:EmployeeManagementView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type emvm:AddEmployeeViewModel}">
            <emv:AddEmployeeView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type bdvm:BasicDataViewModel }">
            <bdv:BasicDataView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type bdvm:BaseAmountTableViewModel }">
            <bdv:BaseAmountTableView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type bdvm:AckValueVariableTableViewModel}">
            <bdv:AckValueVariableTable/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type bdvm:BaseAmountOptionViewModel}">
            <bdv:BaseAmountOptionView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type cvm:CommissionViewModel}">
            <cv:CommissionView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type cvm:CommissionOverviewViewModel}">
            <cv:CommissionOverviewView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ivm:RegisterApplicationViewModel}">
            <iv:RegisterApplicationView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ivm:RegisterPersonApplicationViewModel}">
            <iv:RegisterPersonApplicationView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ivm:RegisterOPIPApplicationViewModel}">
            <iv:RegisterOPIPApplicationView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ivm:RegisterOPICApplicationViewModel}">
            <iv:RegisterOPICApplicationView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type emvm:HandleEmployeeViewModel}">
            <emv:HandleEmployeeView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type emvm:AddUserAccessViewModel}">
            <emv:AddUserAccessView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type emvm:ManageUserAccessViewModel}">
            <emv:ManageUserAccessView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type bdvm:PermissionValueTableViewModel}">
            <bdv:PermissionValueTableView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type bdvm:VacationPayViewModel}">
            <bdv:VacationPayView/>
        </DataTemplate>
        <DataTemplate DataType="{ x:Type spvm:GetandexportSalesstatisticsViewModel}">
            <spv:GetandexportSalesstatisticsView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type spvm:GetandexportCustomerLeadsViewModel}">
            <spv:GetandexportCustomerLeads/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type spvm:GetTrendstatitcsViewModel}">
            <spv:GetTrendstatitics/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ivm:RegisterLifeApplicationViewModel}">
            <iv:RegisterLifeApplicationView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ivm:SignedInsuranceViewModel}">
            <iv:SignedInsurancesView/>
        </DataTemplate>
        <!--#region Exit Button Style-->
        <Style x:Key="ExitBtnStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template"> 
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="DarkRed"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="DarkRed"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Visibility" TargetName="border" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->
        <!--#region Home Button Style-->
        <Style x:Key="HomeBtnStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="Green"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="Green"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Visibility" TargetName="border" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->
        <!--#region Main Menu Button Style-->
        <Style x:Key="MainMenuButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="Green"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="Green"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Visibility" TargetName="border" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->
        <!--#region Other Button Style-->
        <Style x:Key="OtherButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="DarkSeaGreen"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter Property="Background" TargetName="border" Value="DarkSeaGreen"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="DarkSeaGreen"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#66242526"/>
                                <Setter Property="TextElement.Foreground" TargetName="border" Value="#66E4E6EB"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->
    </Application.Resources>
</Application>
